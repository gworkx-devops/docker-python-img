// REFS :
//
// https://www.shellhacks.com/jenkins-pipeline-conditionally-define-variables-groovy-script/

pipeline {
    agent any

    environment {
        SELECTED_REPO = ''
    }

    stages {
        stage('SetUp') {
            agent {
                docker {
                    image 'python:alpine'
                    args '-v $HOME/.ssh.jenkins:/root/.ssh'
                }
            }
            steps {
                echo 'SetUp The Build Env For Python 3 Alpine >>'
                sh"""
                    apk update && apk upgrade && apk add --no-cache build-base alpine-sdk git bash \
                    openssh-client openssl-dev python-dev libffi-dev libxml2-dev rsync
                    printenv
                """

                script {
                    echo 'Select Repo To Build An Image >>'

                    def selectRepo = input(id: 'selectRepo', message: 'Select Repo To Build',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', choices:
                            ['workshop-app-python','workshop-manec'], name: 'optsRepo']
                        ]
                    )

                    echo 'Fetch The Code To Bake In Docker Image >>'
                    if (selectRepo != 'workshop-app-python') {
                        def repoURI = 'git@bitbucket.org:gworkx/' + "${selectRepo}" + '.git'
                        if (fileExists('./checkout-code')) {
                            sh"""
                                rm -rf ./checkout-code

                                git version
                                echo "${selectRepo}"
                                git clone ${repoURI} checkout-code
                                ls -al ./checkout-code

                                rsync -Phavz ./checkout-code/app-code/ ./source-code/
                            """
                        }else {
                            sh"""
                                git version
                                git clone ${repoURI} checkout-code
                                ls -al ./checkout-code

                                rsync -Phavz ./checkout-code/app-code/ ./source-code/
                            """
                        }
                    }else{
                        sh"""
                            rm -rf ./source-code
                            rsync -Phavz ./app-code/ ./source-code/
                            ls -al ./source-code
                        """
                    }
                    SELECTED_REPO = "${selectRepo}"
                }
            }
        }
        stage('Build') {
            agent {
                docker {
                    image 'docker:latest'
                    args  '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo 'Build The Image >>'
                script {
                    if (SELECTED_REPO == 'manec' ){
                        sh"""
                            docker image build --no-cache -t gworkx/img:${SELECTED_REPO}-latest -f Dockerfile.manec .
                        """
                    }else{
                        sh"""
                            docker image build --no-cache -t gworkx/img:${SELECTED_REPO}-latest -f Dockerfile.alpine .
                        """
                    }
                }
            }
        }
        stage('Publish') {
            agent {
                docker {
                    image 'docker:latest'
                    args  '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo 'Publish The Image To The Registry >>'
                withDockerRegistry([ credentialsId: "gworkx-dockerhub",url: "" ]) {
                    sh"""
                        docker image push gworkx/img:${SELECTED_REPO}-latest
                    """
                }
            }
        }
    }
    post {
        always {
            echo 'CLEANING UP >>'
            deleteDir()
        }
    }
}
