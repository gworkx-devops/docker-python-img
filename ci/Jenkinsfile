pipeline {
    agent any

    stages {
        stage('SetUp') {
            agent {
                docker {
                    image 'python:alpine'
                    args '-v $HOME/.ssh.jenkins:/root/.ssh'
                }
            }
            steps {
                echo 'SetUp The Build Env For Python 3 Alpine >>'
                sh"""
                    apk update && apk upgrade && apk add --no-cache build-base alpine-sdk git bash \
                    openssh-client openssl-dev python-dev libffi-dev rsync
                    printenv
                """

                echo 'Fetch The Code To Bake In Docker Image >>'
                script {
                    if (fileExists('./checkout-code')) {
                        sh"""
                            rm -rf ./checkout-code

                            git version
                            git clone git@bitbucket.org:gworkx/gworkx.site.git checkout-code
                            ls -al ./checkout-code

                            rsync -Phavz ./checkout-code/app-code/ ./source-code/
                        """
                    }else {
                        sh"""
                            git version
                            git clone git@bitbucket.org:gworkx/gworkx.site.git checkout-code
                            ls -al ./checkout-code

                            rsync -Phavz ./checkout-code/app-code/ ./source-code/
                        """
                    }
                }
            }
        }
        stage('Build') {
            agent {
                docker {
                    image 'docker:latest'
                    args  '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo 'Build The Image >>'
                sh"""
                    docker image build --no-cache -t gworkx/img:python-latest -f Dockerfile.alpine.python .
                """
            }
        }
        stage('Publish') {
            agent {
                docker {
                    image 'docker:latest'
                    args  '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                echo 'Publish The Image To The Registry >>'
                sh"""
                    docker image ls
                """
            }
        }
    }
}
